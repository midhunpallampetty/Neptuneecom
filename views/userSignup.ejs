<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>User Registration</title>
  <link rel="icon" href="/imgs/logo.png" type="image/x-icon" />
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10.16.7/dist/sweetalert2.min.css" />
</head>

<body class="bg-gray-100 flex items-center justify-center min-h-screen font-sans">
  <form action="#" class="bg-white shadow-xl rounded-xl p-8 w-full max-w-md space-y-6">
    <h1 class="text-2xl font-bold text-center text-gray-800">User Registration</h1>

    <!-- Step 1: Email + Send OTP -->
    <div id="emailSection" class="space-y-2">
      <input type="email" id="email" placeholder="Enter your email address"
        class="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" />
      <span id="emailError" class="text-red-500 text-sm"></span>
      <button type="button" onclick="sendEmailOtp()"
        class="w-full bg-blue-600 text-white py-3 rounded-lg font-semibold hover:bg-blue-700 transition">
        Send OTP
      </button>
    </div>

    <!-- Step 2: OTP Verification -->
    <div id="otpSection" class="space-y-2 hidden">
      <input type="text" id="otp" placeholder="Enter OTP"
        class="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" />
      <span id="otpError" class="text-red-500 text-sm"></span>
      <button type="button" onclick="verifyEmailOtp()"
        class="w-full bg-green-600 text-white py-3 rounded-lg font-semibold hover:bg-green-700 transition">
        Verify OTP
      </button>
      <p id="countdownTimer" class="text-center text-sm text-red-600"></p>
      <button id="resendBtn" type="button"
      onclick="resendOtp()"
      class="w-full font-medium transition disabled:cursor-not-allowed 
             disabled:text-gray-400 disabled:bg-gray-100 text-blue-600 hover:underline hidden">
      Resend OTP
    </button>
    

    </div>

    <!-- Step 3: Final Signup -->
    <div id="signupForm" class="space-y-2 hidden">
      <input type="text" id="username" placeholder="Username"
        class="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" />
      <span id="usernameError" class="text-red-500 text-sm"></span>

      <input type="password" id="password" placeholder="Password"
        class="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" />
      <span id="passwordError" class="text-red-500 text-sm"></span>

      <button type="button" onclick="completeSignup()"
        class="w-full bg-purple-600 text-white py-3 rounded-lg font-semibold hover:bg-purple-700 transition">
        Complete Signup
      </button>
    </div>
  </form>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10.16.7/dist/sweetalert2.all.min.js"></script>
  <script>
    let emailGlobal = "";
    let countdown;

    function showError(id, message) {
      document.getElementById(id).textContent = message;
    }

    function clearError(id) {
      document.getElementById(id).textContent = "";
    }

    function validateEmail(email) {
      const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return regex.test(email);
    }

    function startCountdown(duration) {
  let timeLeft = duration;
  const timerEl = document.getElementById("countdownTimer");
  const resendBtn = document.getElementById("resendBtn");

  resendBtn.classList.remove("hidden");
  resendBtn.disabled = true;
  clearInterval(countdown);

  countdown = setInterval(() => {
    if (timeLeft <= 0) {
      clearInterval(countdown);
      timerEl.textContent = "OTP expired. You can now resend.";
      resendBtn.disabled = false;
    } else {
      timerEl.textContent = `OTP expires in ${timeLeft} seconds`;
      timeLeft--;
    }
  }, 1000);
}


async function resendOtp() {
  const resendBtn = document.getElementById("resendBtn");
  resendBtn.disabled = true;
  document.getElementById("countdownTimer").textContent = "";
  await sendEmailOtp(); // Automatically restarts countdown
}


    async function sendEmailOtp() {
      const email = document.getElementById("email").value.trim();
      emailGlobal = email;
      clearError("emailError");

      if (!validateEmail(email)) {
        showError("emailError", "Please enter a valid email address.");
        return;
      }

      try {
        const res = await fetch("/send-otp", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ email }),
        });

        const data = await res.json();

        if (res.ok) {
          await Swal.fire("Success", "OTP has been sent to your email!", "success");
          document.getElementById("emailSection").classList.add("hidden");
          document.getElementById("otpSection").classList.remove("hidden");
          startCountdown(60);
        } else {
          await Swal.fire("Error", data.message || "Failed to send OTP", "error");
        }
      } catch (err) {
        await Swal.fire("Error", "Network error. Please try again later.", "error");
      }
    }

    async function resendOtp() {
      clearInterval(countdown);
      await sendEmailOtp();
    }

    async function verifyEmailOtp() {
      const otp = document.getElementById("otp").value.trim();
      clearError("otpError");

      if (!otp) {
        showError("otpError", "Please enter the OTP.");
        return;
      }

      try {
        const res = await fetch("/verify-otps", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ otp }),
        });

        const data = await res.json();

        if (res.ok) {
          clearInterval(countdown);
          await Swal.fire("Success", "Email verified successfully!", "success");

          document.getElementById("otpSection").classList.add("hidden");
          document.getElementById("signupForm").classList.remove("hidden");
        } else {
          await Swal.fire("Error", data.message || "Invalid OTP", "error");
        }
      } catch (err) {
        await Swal.fire("Error", "Network error. Please try again later.", "error");
      }
    }

    async function completeSignup() {
      const username = document.getElementById("username").value.trim();
      const password = document.getElementById("password").value.trim();

      let hasError = false;
      clearError("usernameError");
      clearError("passwordError");

      if (!username) {
        showError("usernameError", "Username is required.");
        hasError = true;
      }

      if (!password || password.length < 6) {
        showError("passwordError", "Password must be at least 6 characters.");
        hasError = true;
      }

      if (hasError) return;

      try {
        const res = await fetch("/register-user", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ username, password, email: emailGlobal }),
        });

        const data = await res.json();
        console.log(res, 'data response');

        if (res.ok) {
          await Swal.fire("Success", "Account created successfully!", "success");
          window.location.href = "/mainpage";
        } else {
          await Swal.fire("Error", data.message || "Failed to register user", "error");
        }
      } catch (err) {
        await Swal.fire("Error", "Network error. Please try again later.", "error");
      }
    }
  </script>
</body>

</html>
